rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userID} {
      function isUserValid(user) {
        return user != null &&
        user.token.email_verified &&
        user.uid == userID;
      }

      function isUserDataValid(userData, user) {
        return userData.uid is string &&
        userData.uid != '' &&
        userData.uid == user.uid &&
        userData.name is string &&
        userData.name != '' &&
        userData.email is string &&
        userData.email != '' &&
        userData.createdAt is timestamp
      }

      allow read: if isUserValid(request.auth);

      allow create: if isUserValid(request.auth) &&
        request.resource.data.keys().hasOnly(['uid', 'name', 'email', 'createdAt']) &&
        isUserDataValid(request.resource.data, request.auth);
    }

    match /lists/{listID} {
      function isUserValid(user) {
        return user != null && user.token.email_verified;
      }

      function isCreateDataValid(data) {
        return data.keys().hasOnly(['id', 'title', 'items', 'owner', 'public', 'createdAt']) &&
        data.id is string &&
        data.id != '' &&
        data.id == listID &&
        data.title is string &&
        data.title != '' &&
        data.items is map &&
        data.items.data is map &&
        data.items.meta is string &&
        data.owner is string &&
        data.public is bool &&
        data.createdAt is timestamp;
      }

      function hasPermission(user, data) {
        return data.owner == user.token.email ||
        (data.get('editor', '') == user.token.email &&
        data.public == true);
      }

      function allowOwnerUpdateTitlePublicAdmitted(user, newData, oldData) {
        return user.token.email == oldData.owner &&
        newData.diff(oldData).affectedKeys().hasOnly(['title', 'public', 'admitted', 'updatedAt']) &&
        (newData.get('title', '') is string &&
        newData.get('title', '') != oldData.get('title', '') ||
        newData.get('admitted', '') is string &&
        newData.get('admitted', '') != oldData.get('admitted', '') ||
        newData.public is bool &&
        newData.public != oldData.public) &&
        newData.updatedAt is timestamp;
      }

      function allowEditorUpdateEditor(user, newData, oldData) {
        return oldData.get('admitted', '') == user.token.email &&
        newData.diff(oldData).affectedKeys().hasOnly(['editor', 'updatedAt']) &&
        newData.updatedAt is timestamp &&
        (oldData.size() - newData.size() == 1 ||
        newData.get('editor', '') == oldData.get('admitted', ''));
      }

      function allowCreateItem(newData, oldData, itemId) {
        return newData.diff(oldData).affectedKeys().hasOnly([itemId]) &&
        newData[itemId].keys().hasOnly(['id', 'title', 'isFinished', 'isUrgent', 'createdAt']) &&
        newData[itemId].id is string &&
        newData[itemId].id != '' &&
        newData[itemId].title is string &&
        newData[itemId].title != '' &&
        newData[itemId].isFinished is bool &&
        newData[itemId].isUrgent is bool &&
        newData[itemId].createdAt is timestamp;
      }

      function allowToggleItem(newData, oldData, itemId) {
        return newData.diff(oldData).affectedKeys().hasOnly([itemId]) &&
        newData[itemId].diff(oldData).affectedKeys().hasOnly(['isFinished', 'updatedAt']) &&
        newData[itemId].isFinished is bool &&
        newData[itemId].updatedAt is timestamp;
      }

      function allowDeleteItem(newData, oldData, itemId) {
        return newData.diff(oldData).affectedKeys().hasOnly([itemId]) &&
        oldData.size() - newData.size() == 1; 
      }

      function allowUpdateItem(newData, oldData, itemId) {
        return newData.diff(oldData).affectedKeys().hasOnly([itemId]) &&
        (newData[itemId].title is string &&
        newData[itemId].title != '' ||
        newData[itemId].isUrgent is bool) &&
        newData[itemId].updatedAt is timestamp;
      }

      allow read: if isUserValid(request.auth) && hasPermission(request.auth, resource.data);

      allow create: if isUserValid(request.auth) &&
        request.auth.token.email == request.resource.data.owner &&
        isCreateDataValid(request.resource.data);

      allow update: if isUserValid(request.auth) &&
        (allowOwnerUpdateTitlePublicAdmitted(request.auth, request.resource.data, resource.data) ||
        allowEditorUpdateEditor(request.auth, request.resource.data, resource.data) ||
        hasPermission(request.auth, resource.data) &&
        request.resource.data.items.meta is string &&
        (allowCreateItem(request.resource.data.items.data, resource.data.items.data, request.resource.data.items.meta) ||
        allowDeleteItem(request.resource.data.items.data, resource.data.items.data, request.resource.data.items.meta) ||
        allowToggleItem(request.resource.data.items.data, resource.data.items.data, request.resource.data.items.meta) ||
        allowUpdateItem(request.resource.data.items.data, resource.data.items.data, request.resource.data.items.meta)));

      allow delete: if isUserValid(request.auth) &&
        request.auth.token.email == resource.data.owner;
    }
  }
}